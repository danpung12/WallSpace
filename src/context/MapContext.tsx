'use client';

import React, { createContext, useContext, useRef, useState, useCallback, useMemo, ReactNode, useEffect } from 'react';
import { KakaoPlace, KakaoMap, KakaoLatLng, KakaoGeocoderResult, KakaoGeocoderStatus } from '@/types/kakao';
import { LocationDetail, Space, Artwork } from '@/types/database';
import { getLocations, getSpaces } from '@/lib/api/locations';
import { getUserArtworks } from '@/lib/api/artworks';

// --- ÌÉÄÏûÖ Ï†ïÏùò ---
export type { LocationDetail as LocationType, Space, Artwork };

// --- Îç∞Ïù¥ÌÑ∞ Î∞è Ïú†Ìã∏ Ìï®Ïàò ---
// artworksDataÎäî Ïù¥Ï†ú SupabaseÏóêÏÑú Í∞ÄÏ†∏Ïò¥
export const disabledDaysData = [28];
export const toYMD = (d: Date) => new Date(d.getFullYear(), d.getMonth(), d.getDate());
export const isSameDay = (a: Date, b: Date) => a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();
export const fmtKoreanDate = (d: Date) => `${d.getMonth() + 1}Ïõî ${d.getDate()}Ïùº`;
export const getCalendarCells = (viewDate: Date) => {
    const y = viewDate.getFullYear(); const m = viewDate.getMonth();
    const firstWeekday = new Date(y, m, 1).getDay();
    const daysInMonth = new Date(y, m + 1, 0).getDate();
    const prevMonthDays = new Date(y, m, 0).getDate();
    const numWeeks = Math.ceil((firstWeekday + daysInMonth) / 7);
    const totalCells = numWeeks * 7;
    const cells: { date: Date; inMonth: boolean }[] = [];
    for (let i = firstWeekday - 1; i >= 0; i--) { cells.push({ date: new Date(y, m - 1, prevMonthDays - i), inMonth: false }); }
    for (let d = 1; d <= daysInMonth; d++) { cells.push({ date: new Date(y, m, d), inMonth: true }); }
    while (cells.length < totalCells) { const last = cells[cells.length - 1].date; const next = new Date(last.getFullYear(), last.getMonth(), last.getDate() + 1); cells.push({ date: next, inMonth: next.getMonth() === m }); }
    return cells;
};

interface MapContextType {
    mapInstance: React.RefObject<KakaoMap | null>;
    isMapLoading: boolean;
    locationInfo: { city: string };
    selectedPlace: LocationDetail | null;
    setSelectedPlace: React.Dispatch<React.SetStateAction<LocationDetail | null>>;
    initializeMap: (container: HTMLElement) => void;
    
    // Supabase Îç∞Ïù¥ÌÑ∞
    locations: LocationDetail[];
    artworks: Artwork[];
    loading: boolean;
    error: string | null;
    
    isDetailPageVisible: boolean;
    setDetailPageVisible: React.Dispatch<React.SetStateAction<boolean>>;
    isDatePickerOpen: boolean;
    setDatePickerOpen: React.Dispatch<React.SetStateAction<boolean>>;
    viewDate: Date;
    startDate: Date | null;
    endDate: Date | null;
    activeFilter: string | null;
    selectedArtwork: Artwork | null;
    setSelectedArtwork: React.Dispatch<React.SetStateAction<Artwork | null>>;
    isArtworkModalOpen: boolean;
    setArtworkModalOpen: React.Dispatch<React.SetStateAction<boolean>>;
    isArtworkSelectorVisible: boolean;
    isSearchModalOpen: boolean;
    setSearchModalOpen: React.Dispatch<React.SetStateAction<boolean>>;
    isOptionsMenuOpen: boolean;
    setOptionsMenuOpen: React.Dispatch<React.SetStateAction<boolean>>;
    parkingFilter: boolean;
    setParkingFilter: React.Dispatch<React.SetStateAction<boolean>>;
    open24HoursFilter: boolean;
    setOpen24HoursFilter: React.Dispatch<React.SetStateAction<boolean>>;
    petsAllowedFilter: boolean;
    setPetsAllowedFilter: React.Dispatch<React.SetStateAction<boolean>>;
    cells: { date: Date; inMonth: boolean }[];
    hasRange: boolean;
    filterButtons: string[];
    headerLabel: string;
    
    handlePlaceSelect: (place: KakaoPlace) => void;
    gotoMonth: (offset: number) => void;
    isDisabled: (cell: Date) => boolean;
    onClickDay: (cell: Date) => void;
    getDayClass: (cell: Date, inMonth: boolean) => string;
    handleFilterClick: (label: string) => void;
    refreshLocations: () => Promise<void>;
}

const MapContext = createContext<MapContextType | null>(null);

export function MapProvider({ children }: { children: ReactNode }) {
    const mapInstance = useRef<KakaoMap | null>(null);
    const markersRef = useRef<any[]>([]); // Ref to store markers
    const [isMapLoading, setMapLoading] = useState(true);
    const [locationInfo, setLocationInfo] = useState({ city: 'ÏúÑÏπò Ï∞æÎäî Ï§ë...' });
    const [selectedPlace, setSelectedPlace] = useState<LocationDetail | null>(null);
    const isMapInitialized = useRef(false);
    
    // Supabase Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉú
    const [locations, setLocations] = useState<LocationDetail[]>([]);
    const [artworks, setArtworks] = useState<Artwork[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [retryCount, setRetryCount] = useState(0);
    const MAX_RETRY_COUNT = 3;

    // UI State
    const [isDetailPageVisible, setDetailPageVisible] = useState(false);
    const [isDatePickerOpen, setDatePickerOpen] = useState(false);
    const [viewDate, setViewDate] = useState(() => new Date(new Date().getFullYear(), new Date().getMonth(), 1));
    const [startDate, setStartDate] = useState<Date | null>(null);
    const [endDate, setEndDate] = useState<Date | null>(null);
    const [activeFilter, setActiveFilter] = useState<string | null>(null);
    const [selectedArtwork, setSelectedArtwork] = useState<Artwork | null>(null);
    const [isArtworkModalOpen, setArtworkModalOpen] = useState(false);
    const [isArtworkSelectorVisible, setArtworkSelectorVisible] = useState(false);
    const [isSearchModalOpen, setSearchModalOpen] = useState(false);
    const [isOptionsMenuOpen, setOptionsMenuOpen] = useState(false);
    const [parkingFilter, setParkingFilter] = useState(false);
    const [open24HoursFilter, setOpen24HoursFilter] = useState(false);
    const [petsAllowedFilter, setPetsAllowedFilter] = useState(false);
    
    // ÏòàÏïΩ Í∞ÄÎä• Ïó¨Î∂ÄÎ•º Ï∂îÏ†ÅÌïòÎäî Map (location_id -> boolean)
    const [locationAvailability, setLocationAvailability] = useState<Map<string, boolean>>(new Map());

    // Supabase Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ìï®Ïàò
    const loadData = useCallback(async (isRetry = false) => {
        try {
            if (isRetry) {
                console.log(`üîÑ Retrying to load locations (attempt ${retryCount + 1}/${MAX_RETRY_COUNT})...`);
            } else {
                console.log('üìç Loading locations...');
            }
            setLoading(true);
            setError(null);
            
            // API routesÎ•º ÌÜµÌï¥ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            const locationsResponse = await fetch('/api/locations');
            
            if (!locationsResponse.ok) {
                throw new Error('Failed to fetch locations');
            }
            
            const locationsData = await locationsResponse.json();
            
            // ÏÇ¨Ïö©Ïûê ÏûëÌíà Í∞ÄÏ†∏Ïò§Í∏∞ (Î°úÍ∑∏Ïù∏ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Îπà Î∞∞Ïó¥)
            let artworksData: Artwork[] = [];
            try {
                artworksData = await getUserArtworks();
                console.log('‚úÖ User artworks loaded:', artworksData.length);
            } catch (artworkError) {
                console.log('‚ÑπÔ∏è No user artworks (user may not be logged in)');
            }
            
            console.log('‚úÖ Locations loaded:', locationsData.length);
            setLocations(locationsData);
            setArtworks(artworksData);
            setRetryCount(0); // ÏÑ±Í≥µÌïòÎ©¥ Ïû¨ÏãúÎèÑ Ïπ¥Ïö¥Ìä∏ Î¶¨ÏÖã
            
            // Ï≤´ Î≤àÏß∏ ÏûëÌíàÏùÑ Í∏∞Î≥∏ ÏÑ†ÌÉùÏúºÎ°ú ÏÑ§Ï†ï
            if (artworksData.length > 0) {
                setSelectedArtwork(artworksData[0]);
            }
        } catch (err) {
            console.error('‚ùå Error loading data:', err);
            setError('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        } finally {
            setLoading(false);
        }
    }, [retryCount]);
    
    // Ï¥àÍ∏∞ Î°úÎìú
    useEffect(() => {
        loadData();
    }, [loadData]);

    // ÏûêÎèô Ïû¨ÏãúÎèÑ Î°úÏßÅ: locationsÍ∞Ä ÎπÑÏñ¥ÏûàÍ≥† Î°úÎî©Ïù¥ ÏôÑÎ£åÎêú Í≤ΩÏö∞
    useEffect(() => {
        if (!loading && locations.length === 0 && retryCount < MAX_RETRY_COUNT) {
            console.warn('‚ö†Ô∏è No locations found after loading. Will retry in 2 seconds...');
            const timer = setTimeout(() => {
                setRetryCount(prev => prev + 1);
                loadData(true);
            }, 2000); // 2Ï¥à ÌõÑ Ïû¨ÏãúÎèÑ

            return () => clearTimeout(timer);
        } else if (!loading && locations.length === 0 && retryCount >= MAX_RETRY_COUNT) {
            console.error('‚ùå Max retry attempts reached. Failed to load locations.');
        } else if (!loading && locations.length > 0) {
            console.log(`‚úÖ Successfully loaded ${locations.length} locations`);
        }
    }, [loading, locations.length, retryCount, loadData]);

    // Derived State
    const filterButtons = ['ÏûëÌíà ÏÑ†ÌÉù', 'Ïπ¥Ìéò', 'Í∞§Îü¨Î¶¨', 'Î¨∏ÌôîÌöåÍ¥Ä'];
    const year = viewDate.getFullYear();
    const month = viewDate.getMonth();
    const cells = useMemo(() => getCalendarCells(viewDate), [viewDate]);
    const hasRange = useMemo(() => !!(startDate && endDate), [startDate, endDate]);
    const headerLabel = useMemo(() => `${year}ÎÖÑ ${month + 1}Ïõî`, [year, month]);

    // ÎÇ†ÏßúÍ∞Ä ÏÑ†ÌÉùÎêòÏóàÏùÑ Îïå Í∞Å locationÏùò ÏòàÏïΩ Í∞ÄÎä• Ïó¨Î∂Ä Ï≤¥ÌÅ¨
    useEffect(() => {
        const checkAvailability = async () => {
            if (!startDate || !endDate || locations.length === 0) {
                setLocationAvailability(new Map());
                return;
            }

            const availabilityMap = new Map<string, boolean>();
            const startStr = startDate.toISOString().split('T')[0];
            const endStr = endDate.toISOString().split('T')[0];

            for (const location of locations) {
                try {
                    // location Í∞ùÏ≤¥Ïóê Ïù¥ÎØ∏ spaces Ï†ïÎ≥¥Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏùå
                    const spaces = (location as any).spaces || [];
                    
                    // spacesÍ∞Ä ÏóÜÏúºÎ©¥ ÏòàÏïΩ Í∞ÄÎä•ÏúºÎ°ú ÌëúÏãú
                    if (spaces.length === 0) {
                        availabilityMap.set(location.id, true);
                        continue;
                    }
                    
                    // Í∞Å spaceÏùò ÏòàÏïΩ Í∞ÄÎä• Ïó¨Î∂Ä Ï≤¥ÌÅ¨
                    let hasAvailableSpace = false;
                    
                    for (const space of spaces) {
                        const bookingsResponse = await fetch(`/api/reservations?space_id=${space.id}`);
                        if (!bookingsResponse.ok) continue;
                        
                        const bookings = await bookingsResponse.json();
                        
                        // ÏÑ†ÌÉùÌïú ÎÇ†Ïßú Î≤îÏúÑÏôÄ Í≤πÏπòÎäî ÏòàÏïΩÏù¥ ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨
                        const hasConflict = bookings.some((booking: any) => {
                            if (booking.status === 'cancelled') return false;
                            
                            const bookingStart = booking.start_date.split('T')[0];
                            const bookingEnd = booking.end_date.split('T')[0];
                            
                            // ÎÇ†Ïßú Î≤îÏúÑÍ∞Ä Í≤πÏπòÎäîÏßÄ Ï≤¥ÌÅ¨
                            return !(endStr < bookingStart || startStr > bookingEnd);
                        });
                        
                        if (!hasConflict) {
                            hasAvailableSpace = true;
                            break; // ÌïòÎÇòÎùºÎèÑ ÏòàÏïΩ Í∞ÄÎä•ÌïòÎ©¥ OK
                        }
                    }
                    
                    availabilityMap.set(location.id, hasAvailableSpace);
                } catch (error) {
                    console.error(`Error checking availability for location ${location.id}:`, error);
                    availabilityMap.set(location.id, true); // ÏóêÎü¨ Ïãú Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÏòàÏïΩ Í∞ÄÎä•ÏúºÎ°ú ÌëúÏãú
                }
            }
            
            setLocationAvailability(availabilityMap);
        };

        checkAvailability();
    }, [startDate, endDate, locations]);

    const loadMarkers = useCallback((map: KakaoMap) => {
        const { kakao } = window;
        if (!kakao) return;
        
        // Clear existing markers from ref
        markersRef.current.forEach(({ marker, overlay }) => {
            marker.setMap(null);
            overlay.setMap(null);
        });
        markersRef.current = [];

        if (locations.length === 0) {
            console.log('No locations to display on map');
            return;
        }

        console.log('Loading markers for locations:', locations.length);
        const hasDateRange = !!(startDate && endDate);

        locations.forEach((place) => {
            const placePosition = new kakao.maps.LatLng(place.lat, place.lng);
            
            const marker = new kakao.maps.Marker({ map, position: placePosition });
            
            const handleClick = () => {
                setSelectedPlace(place);
                map.setCenter(placePosition);
            };
            
            kakao.maps.event.addListener(marker, 'click', handleClick);
            
            const contentNode = document.createElement('div');
            contentNode.className = 'custom-overlay-style';
            
            // ÎÇ†ÏßúÍ∞Ä ÏÑ†ÌÉùÎêòÏóàÍ≥† ÏòàÏïΩ Î∂àÍ∞ÄÏù∏ Í≤ΩÏö∞
            const isAvailable = hasDateRange ? (locationAvailability.get(place.id) !== false) : true;
            const statusText = hasDateRange && !isAvailable ? 'ÏòàÏïΩ Î∂àÍ∞Ä' : (place.statusText || 'ÏòàÏïΩ Í∞ÄÎä•');
            const statusColor = hasDateRange && !isAvailable ? '#EF4444' : (place.statusColor || '#3B82F6');
            
            contentNode.innerHTML = `<div class="font-bold">${place.name}</div><div style="color:${statusColor};" class="text-xs mt-0.5">${statusText}</div>`;
            contentNode.onclick = handleClick;
            
            const overlay = new kakao.maps.CustomOverlay({ map, position: placePosition, content: contentNode, yAnchor: 2.2 });
            
            // Store marker and its associated data
            markersRef.current.push({ marker, overlay, place, isAvailable });
        });
    }, [locations, startDate, endDate, locationAvailability]);

    // Effect to reload markers when locations change
    useEffect(() => {
        const map = mapInstance.current;
        if (map && locations.length > 0 && !loading) {
            console.log('Reloading markers because locations changed');
            loadMarkers(map);
        }
    }, [locations, loading, loadMarkers]);

    // Effect to filter markers based on activeFilter or parkingFilter
    useEffect(() => {
        markersRef.current.forEach(({ marker, overlay, place }) => {
            const categoryName = typeof place.category === 'string' ? place.category : place.category?.name;
            const isCategoryMatch = !activeFilter || categoryName === activeFilter;
            const isParkingMatch = !parkingFilter || place.options?.parking;
            const isOpen24HoursMatch = !open24HoursFilter || place.options?.twentyFourHours;
            const arePetsAllowedMatch = !petsAllowedFilter || place.options?.pets;
            const isVisible =
              isCategoryMatch &&
              isParkingMatch &&
              isOpen24HoursMatch &&
              arePetsAllowedMatch;
            
            marker.setVisible(isVisible);
            overlay.setVisible(isVisible);
        });
    }, [activeFilter, parkingFilter, open24HoursFilter, petsAllowedFilter]);


    const initializeMap = useCallback((container: HTMLElement) => {
        if (isMapInitialized.current || !window.kakao) return;
        isMapInitialized.current = true;
        
        window.kakao.maps.load(() => {
            const createAndSetupMap = (lat: number, lng: number) => {
                const map = new window.kakao.maps.Map(container, { center: new window.kakao.maps.LatLng(lat, lng), level: 5 });
                mapInstance.current = map;
                loadMarkers(map);
                const geocoder = new window.kakao.maps.services.Geocoder();
                const updateLocationInfo = (center: KakaoLatLng) => {
                    geocoder.coord2Address(center.getLng(), center.getLat(), (result: KakaoGeocoderResult, status: KakaoGeocoderStatus) => {
                        if (status === 'OK' && result[0]) setLocationInfo({ city: result[0].address.region_2depth_name });
                    });
                };
                updateLocationInfo(map.getCenter());
                window.kakao.maps.event.addListener(map, 'center_changed', () => updateLocationInfo(map.getCenter()));
                setMapLoading(false);
            };
            navigator.geolocation.getCurrentPosition(p => createAndSetupMap(p.coords.latitude, p.coords.longitude), () => createAndSetupMap(37.5665, 126.9780));
        });
    }, [loadMarkers]);
    
    const handlePlaceSelect = useCallback((place: KakaoPlace) => {
        const map = mapInstance.current;
        if (!map || !window.kakao) return;
        const coords = new window.kakao.maps.LatLng(Number(place.y), Number(place.x));
        map.setCenter(coords);
        map.setLevel(5);
        setLocationInfo({ city: place.place_name });
        setSearchModalOpen(false);
    }, []);

    const gotoMonth = useCallback((offset: number) => setViewDate(prev => new Date(prev.getFullYear(), prev.getMonth() + offset, 1)), []);
    const isDisabled = useCallback((cell: Date) => {
        // Ïò§Îäò ÎÇ†Ïßú (ÏãúÍ∞Ñ Ï†úÏô∏)
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        // cell ÎÇ†Ïßú (ÏãúÍ∞Ñ Ï†úÏô∏)
        const cellDate = new Date(cell);
        cellDate.setHours(0, 0, 0, 0);
        
        // Ïò§Îäò Ïù¥Ï†Ñ ÎÇ†ÏßúÎäî ÎπÑÌôúÏÑ±Ìôî
        return cellDate < today;
    }, []);
    const onClickDay = useCallback((cell: Date) => {
        if (isDisabled(cell)) return;
        const c = toYMD(cell);
        if (!startDate || (startDate && endDate && !isSameDay(startDate, endDate))) { 
            // ÏãúÏûëÏùºÏù¥ ÏóÜÍ±∞ÎÇò, Ïù¥ÎØ∏ Î≤îÏúÑÍ∞Ä ÏÑ†ÌÉùÎêú Í≤ΩÏö∞ -> ÏÉàÎ°ú ÏãúÏûë
            setStartDate(c); 
            setEndDate(c); 
        } else { 
            // ÏãúÏûëÏùºÎßå ÏûàÎäî Í≤ΩÏö∞ -> Ï¢ÖÎ£åÏùº ÏÑ§Ï†ï
            if (c < startDate) {
                setEndDate(startDate);
                setStartDate(c);
            } else {
                setEndDate(c);
            }
        }
    }, [startDate, endDate, isDisabled]);

    const getDayClass = useCallback((cell: Date, inMonth: boolean) => {
        if (isDisabled(cell)) return "date-picker-day date-picker-day-disabled";
        if (!inMonth) return "date-picker-day date-picker-day-muted";
        const isSelected = startDate && endDate && isSameDay(startDate, endDate) && isSameDay(cell, startDate);
        if (isSelected) return "date-picker-day date-picker-day-selected";
        const isStart = startDate && isSameDay(cell, startDate);
        const isEnd = endDate && isSameDay(cell, endDate);
        if(isStart && isEnd) return "date-picker-day date-picker-day-selected";
        if (isStart) return "date-picker-day date-picker-day-selected date-range-start";
        if (isEnd) return "date-picker-day date-picker-day-selected date-range-end";
        if (startDate && endDate && cell > startDate && cell < endDate) return "date-picker-day date-picker-day-in-range";
        return "date-picker-day";
    }, [startDate, endDate, isDisabled]);

    const handleFilterClick = useCallback((label: string) => {
        if (label === 'ÏûëÌíà ÏÑ†ÌÉù') {
            setArtworkSelectorVisible(p => !p);
        } else {
            // If the clicked filter is already active, deactivate it. Otherwise, activate it.
            setActiveFilter(prevFilter => (prevFilter === label ? null : label));
            setArtworkSelectorVisible(false);
        }
    }, []);

    const value = {
        mapInstance, isMapLoading, locationInfo, selectedPlace, setSelectedPlace, initializeMap,
        isDetailPageVisible, setDetailPageVisible, isDatePickerOpen, setDatePickerOpen, viewDate, startDate, endDate,
        activeFilter, selectedArtwork, setSelectedArtwork, isArtworkModalOpen, setArtworkModalOpen, isArtworkSelectorVisible,
        isSearchModalOpen, setSearchModalOpen, isOptionsMenuOpen, setOptionsMenuOpen, parkingFilter, setParkingFilter,
        open24HoursFilter, setOpen24HoursFilter, petsAllowedFilter, setPetsAllowedFilter,
        cells, hasRange, filterButtons, headerLabel,
        handlePlaceSelect, gotoMonth, isDisabled, onClickDay, getDayClass, handleFilterClick,
        // Supabase Îç∞Ïù¥ÌÑ∞
        locations, artworks, loading, error,
        refreshLocations: loadData,
    };

    return <MapContext.Provider value={value}>{children}</MapContext.Provider>;
}

export function useMap(): MapContextType {
    const context = useContext(MapContext);
    if (!context) throw new Error('useMap must be used within a MapProvider');
    return context;
}
